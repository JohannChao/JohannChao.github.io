<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Oracle中的Pivot函数</title>
      <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93/Oracle/Oracle%E4%B8%AD%E7%9A%84Pivot%E5%87%BD%E6%95%B0/"/>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/Oracle/Oracle%E4%B8%AD%E7%9A%84Pivot%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="Pivot函数"><a href="#Pivot函数" class="headerlink" title="Pivot函数"></a>Pivot函数</h3><p>Pivot函数是在Oracle 数据库 11g 推出之后，新增的一个行数据转列数据的函数。</p><a id="more"></a><p>基础数据展示：</p><table><thead><tr><th>id</th><th>name</th><th>province_code</th><th>visit_times</th></tr></thead><tbody><tr><td>1</td><td>ZhangZi</td><td>BJ</td><td>0</td></tr><tr><td>1</td><td>LiZhen</td><td>BJ</td><td>0</td></tr><tr><td>1</td><td>LiuHong</td><td>BJ</td><td>1</td></tr><tr><td>1</td><td>WangChao</td><td>SH</td><td>0</td></tr><tr><td>1</td><td>QinNing</td><td>SH</td><td>1</td></tr><tr><td>1</td><td>ZhaoYun</td><td>SH</td><td>2</td></tr><tr><td>1</td><td>HongShen</td><td>SH</td><td>2</td></tr><tr><td>1</td><td>MiFeng</td><td>HEB</td><td>0</td></tr><tr><td>1</td><td>ChengKai</td><td>HEB</td><td>1</td></tr><tr><td>1</td><td>ChenGuang</td><td>HEB</td><td>2</td></tr></tbody></table><p>我们现在想知道，访问各个省市的次数的详情，即访问一次,两次，三次的各有多少人。</p><p>可以使用分组函数 count 得到这些数据</p><p>分组数据展示：</p><table><thead><tr><th>province_code</th><th>visit_times</th><th>count</th></tr></thead><tbody><tr><td>BJ</td><td>0</td><td>2</td></tr><tr><td>BJ</td><td>1</td><td>1</td></tr><tr><td>SH</td><td>0</td><td>1</td></tr><tr><td>SH</td><td>1</td><td>1</td></tr><tr><td>SH</td><td>2</td><td>2</td></tr><tr><td>HEB</td><td>0</td><td>1</td></tr><tr><td>HEB</td><td>1</td><td>1</td></tr><tr><td>HEB</td><td>2</td><td>1</td></tr></tbody></table><p>但是，这样展示的话，数据不直观，我们想要得到下面这个样式的结果</p><table><thead><tr><th>visit_times</th><th>BJ</th><th>SH</th><th>HEB</th></tr></thead><tbody><tr><td>0</td><td>2</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>2</td><td>0</td><td>2</td><td>1</td></tr></tbody></table><p>在 Oracle 数据库 11g 推出之前，您需要针对每个值通过 decode 函数进行以上操作，并将每个不同的值编写为一个单独的列。但是，该方法一点也不直观。</p><h3 id="Demo详解"><a href="#Demo详解" class="headerlink" title="Demo详解"></a>Demo详解</h3><p>本文中使用的数据，在文章最后，如果需要直接复制使用即可。</p><p>执行分组SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> province_code, times_purchased, <span class="keyword">count</span>(<span class="number">1</span>) cnt</span><br><span class="line"><span class="keyword">from</span> JOHANN_PIVOT_TEST</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> province_code, times_purchased</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> province_code;</span><br></pre></td></tr></table></figure><p>得到结果如下：</p><img src="/数据库/Oracle/Oracle中的Pivot函数/jieguo3.png" title="分组函数结果"><p>执行包含有Pivot的SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--注意：使用Pivot函数，你要知道自己需要哪些“列”，可通过上述的分组函数先找出来自己可能需要的“列”</span></span><br><span class="line"> <span class="keyword">select</span> * <span class="keyword">from</span> (</span><br><span class="line">   <span class="keyword">SELECT</span> province_code, times_purchased </span><br><span class="line"> <span class="keyword">FROM</span> JOHANN_PIVOT_TEST</span><br><span class="line">)</span><br><span class="line"><span class="keyword">pivot</span> </span><br><span class="line">(</span><br><span class="line">   <span class="keyword">count</span>(province_code)</span><br><span class="line">   <span class="keyword">for</span> province_code <span class="keyword">in</span> (<span class="string">'BJ'</span>,<span class="string">'TJ'</span>,<span class="string">'HEB'</span>,<span class="string">'SH'</span>,<span class="string">'XZ'</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> times_purchased;</span><br></pre></td></tr></table></figure><p>得到结果如下：</p><img src="/数据库/Oracle/Oracle中的Pivot函数/jieguo2.png" title="Pivot函数结果"><p>如果想要以“访问次数”为列，则是需要把SQL做以下改动即可</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">*</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">   <span class="keyword">SELECT</span> province_code, times_purchased </span><br><span class="line"> <span class="keyword">FROM</span> JOHANN_PIVOT_TEST</span><br><span class="line">)</span><br><span class="line"><span class="keyword">pivot</span> </span><br><span class="line">(</span><br><span class="line">   <span class="keyword">count</span>(times_purchased)</span><br><span class="line">   <span class="keyword">for</span> times_purchased <span class="keyword">in</span> (<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> province_code;</span><br></pre></td></tr></table></figure><p>得到结果如下：</p><img src="/数据库/Oracle/Oracle中的Pivot函数/jieguo3.png" title="Pivot函数结果"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">注意:在pivot函数中，只允许使用分组函数</span><br><span class="line">Ø COUNT</span><br><span class="line">Ø AVG</span><br><span class="line">Ø SUM</span><br><span class="line">Ø MAX</span><br><span class="line">Ø MIN</span><br></pre></td></tr></table></figure><h3 id="基础数据"><a href="#基础数据" class="headerlink" title="基础数据"></a>基础数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE &quot;JOHANN_PIVOT_TEST&quot;;</span><br><span class="line">CREATE TABLE &quot;JOHANN_PIVOT_TEST&quot; (</span><br><span class="line">  &quot;CUST_ID&quot; NUMBER(10) NOT NULL ,</span><br><span class="line">  &quot;CUST_NAME&quot; VARCHAR2(20 BYTE) ,</span><br><span class="line">  &quot;PROVINCE_CODE&quot; VARCHAR2(3 BYTE) ,</span><br><span class="line">  &quot;TIMES_PURCHASED&quot; NUMBER(3) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT ALL </span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (1,&apos;temp&apos;,&apos;HEB&apos;,1)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (2,&apos;temp&apos;,&apos;HEB&apos;,1)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (3,&apos;temp&apos;,&apos;HEB&apos;,1)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (4,&apos;temp&apos;,&apos;HEB&apos;,1)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (5,&apos;temp&apos;,&apos;HEB&apos;,2)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (6,&apos;temp&apos;,&apos;HEB&apos;,2)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (7,&apos;temp&apos;,&apos;HEB&apos;,0)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (8,&apos;temp&apos;,&apos;HEB&apos;,0)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (9,&apos;temp&apos;,&apos;HEB&apos;,3)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (10,&apos;temp&apos;,&apos;HEB&apos;,3)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (11,&apos;temp&apos;,&apos;HEB&apos;,3)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (12,&apos;temp&apos;,&apos;HEB&apos;,3)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (13,&apos;temp&apos;,&apos;HEB&apos;,3)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (14,&apos;temp&apos;,&apos;HEB&apos;,4)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (15,&apos;temp&apos;,&apos;HEB&apos;,4)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (16,&apos;temp&apos;,&apos;HEB&apos;,4)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (17,&apos;temp&apos;,&apos;HEB&apos;,4)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (18,&apos;temp&apos;,&apos;HEB&apos;,5)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (19,&apos;temp&apos;,&apos;HEB&apos;,5)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (20,&apos;temp&apos;,&apos;HEB&apos;,5)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (21,&apos;temp&apos;,&apos;BJ&apos;,0)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (22,&apos;temp&apos;,&apos;BJ&apos;,0)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (23,&apos;temp&apos;,&apos;BJ&apos;,1)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (24,&apos;temp&apos;,&apos;BJ&apos;,1)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (25,&apos;temp&apos;,&apos;BJ&apos;,1)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (26,&apos;temp&apos;,&apos;BJ&apos;,2)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (27,&apos;temp&apos;,&apos;BJ&apos;,2)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (28,&apos;temp&apos;,&apos;BJ&apos;,2)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (29,&apos;temp&apos;,&apos;BJ&apos;,2)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (30,&apos;temp&apos;,&apos;BJ&apos;,2)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (31,&apos;temp&apos;,&apos;BJ&apos;,3)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (32,&apos;temp&apos;,&apos;BJ&apos;,4)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (33,&apos;temp&apos;,&apos;BJ&apos;,4)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (34,&apos;temp&apos;,&apos;BJ&apos;,5)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (35,&apos;temp&apos;,&apos;BJ&apos;,5)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (36,&apos;temp&apos;,&apos;BJ&apos;,5)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (37,&apos;temp&apos;,&apos;BJ&apos;,5)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (38,&apos;temp&apos;,&apos;BJ&apos;,5)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (39,&apos;temp&apos;,&apos;TJ&apos;,0)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (40,&apos;temp&apos;,&apos;TJ&apos;,1)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (41,&apos;temp&apos;,&apos;TJ&apos;,1)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (42,&apos;temp&apos;,&apos;TJ&apos;,2)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (43,&apos;temp&apos;,&apos;TJ&apos;,3)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (44,&apos;temp&apos;,&apos;TJ&apos;,3)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (45,&apos;temp&apos;,&apos;TJ&apos;,3)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (46,&apos;temp&apos;,&apos;TJ&apos;,4)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (47,&apos;temp&apos;,&apos;TJ&apos;,4)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (48,&apos;temp&apos;,&apos;TJ&apos;,4)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (49,&apos;temp&apos;,&apos;TJ&apos;,5)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (50,&apos;temp&apos;,&apos;TJ&apos;,5)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (51,&apos;temp&apos;,&apos;TJ&apos;,5)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (52,&apos;temp&apos;,&apos;SH&apos;,0)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (53,&apos;temp&apos;,&apos;SH&apos;,0)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (54,&apos;temp&apos;,&apos;SH&apos;,0)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (55,&apos;temp&apos;,&apos;SH&apos;,1)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (56,&apos;temp&apos;,&apos;SH&apos;,1)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (57,&apos;temp&apos;,&apos;SH&apos;,2)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (58,&apos;temp&apos;,&apos;SH&apos;,2)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (59,&apos;temp&apos;,&apos;SH&apos;,2)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (60,&apos;temp&apos;,&apos;SH&apos;,2)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (61,&apos;temp&apos;,&apos;SH&apos;,3)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (62,&apos;temp&apos;,&apos;SH&apos;,3)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (63,&apos;temp&apos;,&apos;SH&apos;,3)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (64,&apos;temp&apos;,&apos;SH&apos;,3)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (65,&apos;temp&apos;,&apos;SH&apos;,4)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (66,&apos;temp&apos;,&apos;SH&apos;,4)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (67,&apos;temp&apos;,&apos;SH&apos;,4)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (68,&apos;temp&apos;,&apos;SH&apos;,4)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (69,&apos;temp&apos;,&apos;SH&apos;,5)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (70,&apos;temp&apos;,&apos;SH&apos;,5)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (71,&apos;temp&apos;,&apos;SH&apos;,5)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (72,&apos;temp&apos;,&apos;SH&apos;,5)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (73,&apos;temp&apos;,&apos;SH&apos;,5)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (74,&apos;temp&apos;,&apos;SH&apos;,5)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (75,&apos;temp&apos;,&apos;SH&apos;,5)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (76,&apos;temp&apos;,&apos;XZ&apos;,0)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (77,&apos;temp&apos;,&apos;XZ&apos;,0)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (78,&apos;temp&apos;,&apos;XZ&apos;,1)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (79,&apos;temp&apos;,&apos;XZ&apos;,2)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (80,&apos;temp&apos;,&apos;XZ&apos;,3)</span><br><span class="line">INTO &quot;JOHANN_PIVOT_TEST&quot; (CUST_ID,CUST_NAME,PROVINCE_CODE,TIMES_PURCHASED) VALUES (81,&apos;temp&apos;,&apos;XZ&apos;,5)</span><br><span class="line">SELECT 1 FROM DUAL;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程入门</title>
      <link href="/%E7%BA%BF%E7%A8%8B/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%85%A5%E9%97%A8/"/>
      <url>/%E7%BA%BF%E7%A8%8B/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><footer><strong>原文来源： SnailClimb</strong><cite><a href="https://juejin.im/post/5ab116875188255561411b8a#heading-25" target="_blank" rel="noopener">Java多线程入门</a></cite></footer></blockquote> <br><h3 id="进程和多线程简介"><a href="#进程和多线程简介" class="headerlink" title="进程和多线程简介"></a>进程和多线程简介</h3><h4 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h4><h5 id="何为进程？"><a href="#何为进程？" class="headerlink" title="何为进程？"></a>何为进程？</h5><p><font color="#FF0000">进程是程序的一次执行过程，是系统运行程序的基本单位</font>，因此进程是动态的。<font color="#FF0000">系统运行一个程序即是一个进程从创建，运行到消亡的过程</font>。简单来说，一个进程就是一个执行中的程序，它在计算机中一个指令接着一个指令地执行着，同时，每个进程还占有某些系统资源如CPU时间，内存空间，文件，文件，输入输出设备的使用权等等。换句话说，当程序在执行时，将会被操作系统载入内存中。</p><h5 id="何为线程？"><a href="#何为线程？" class="headerlink" title="何为线程？"></a>何为线程？</h5><p>线程与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是<font color="#FF0000">同类的多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多</font>，也正因为如此，线程也被称为<font color="#FF0000">轻量级进程</font>。</p><h5 id="线程和进程有何不同？"><a href="#线程和进程有何不同？" class="headerlink" title="线程和进程有何不同？"></a>线程和进程有何不同？</h5><p>线程是进程划分成的更小的运行单位。线程和进程最大的不同在于基本上<font color="#FF0000">各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响</font>。从另一角度来说，进程属于操作系统的范畴，主要是同一段时间内，可以同时执行一个以上的程序，而线程则是在同一程序内几乎同时执行一个以上的程序段。</p><a id="more"></a><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><h5 id="何为多线程？"><a href="#何为多线程？" class="headerlink" title="何为多线程？"></a>何为多线程？</h5><p>多线程就是<font color="#FF0000">几乎同时</font>执行多个线程（一个处理器在某一个时间点上永远都只能是一个线程！即使这个处理器是多核的，除非有多个处理器才能实现多个线程同时运行。）。<font color="#FF0000">几乎同时是因为实际上多线程程序中的多个线程实际上是一个线程执行一会然后其他的线程再执行</font>，并不是很多书籍所谓的同时执行。</p><h5 id="为什么多线程是必要的？"><a href="#为什么多线程是必要的？" class="headerlink" title="为什么多线程是必要的？"></a>为什么多线程是必要的？</h5><ol><li>使用线程可以把占据长时间的程序中的任务放到后台去处理</li><li>用户界面可以更加吸引人，这样比如用户点击了一个按钮去触发某些事件的处理，可以弹出一个进度条来显示处理的进度</li><li>程序的运行速度可能加快</li></ol><h3 id="使用多线程"><a href="#使用多线程" class="headerlink" title="使用多线程"></a>使用多线程</h3><h4 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h4><p>MyThread.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.run();</span><br><span class="line">System.out.println(<span class="string">"MyThread"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Run.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MyThread mythread = <span class="keyword">new</span> MyThread();</span><br><span class="line">mythread.start();</span><br><span class="line">System.out.println(<span class="string">"运行结束"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src="/线程/Java多线程入门/threadRun.png" title="继承Thread类"><p>从上面的运行结果可以看出：线程是一个子任务，CPU以不确定的方式，或者说是以随机的时间来调用线程中的run方法。</p><h4 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h4><p>推荐实现Runnable接口方式开发多线程，因为Java单继承但是可以实现多个接口。</p><p>MyRunnable.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"MyRunnable"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Run.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Runnable runnable=<span class="keyword">new</span> MyRunnable();</span><br><span class="line">Thread thread=<span class="keyword">new</span> Thread(runnable);</span><br><span class="line">thread.start();</span><br><span class="line">System.out.println(<span class="string">"运行结束！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src="/线程/Java多线程入门/runnableRun.png" title="实现Runnable接口"><h3 id="实例变量和线程安全"><a href="#实例变量和线程安全" class="headerlink" title="实例变量和线程安全"></a>实例变量和线程安全</h3><p>定义在线程类中的实例变量针对其他线程可以有共享和不共享之分</p><h4 id="不共享数据的情况"><a href="#不共享数据的情况" class="headerlink" title="不共享数据的情况"></a>不共享数据的情况</h4><p>MyThread.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.setName(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.run();</span><br><span class="line"><span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">count--;</span><br><span class="line">System.out.println(<span class="string">"由 "</span> + MyThread.currentThread().getName()</span><br><span class="line">+ <span class="string">" 计算，count="</span> + count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Run.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MyThread a = <span class="keyword">new</span> MyThread(<span class="string">"A"</span>);</span><br><span class="line">MyThread b = <span class="keyword">new</span> MyThread(<span class="string">"B"</span>);</span><br><span class="line">MyThread c = <span class="keyword">new</span> MyThread(<span class="string">"C"</span>);</span><br><span class="line">a.start();</span><br><span class="line">b.start();</span><br><span class="line">c.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src="/线程/Java多线程入门/threadbugongxiang.png" title="线程不共享数据"><p>可以看出每个线程都有一个属于自己的实例变量count，它们之间互不影响。我们再来看看另一种情况。</p><h4 id="共享数据的情况"><a href="#共享数据的情况" class="headerlink" title="共享数据的情况"></a>共享数据的情况</h4><p>MyThread.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.run();</span><br><span class="line">count--;</span><br><span class="line">System.out.println(<span class="string">"由 "</span> + MyThread.currentThread().getName() + <span class="string">" 计算，count="</span> + count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Run.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">MyThread mythread=<span class="keyword">new</span> MyThread();</span><br><span class="line">        <span class="comment">//下列线程都是通过mythread对象创建的</span></span><br><span class="line">Thread a=<span class="keyword">new</span> Thread(mythread,<span class="string">"A"</span>);</span><br><span class="line">Thread b=<span class="keyword">new</span> Thread(mythread,<span class="string">"B"</span>);</span><br><span class="line">Thread c=<span class="keyword">new</span> Thread(mythread,<span class="string">"C"</span>);</span><br><span class="line">Thread d=<span class="keyword">new</span> Thread(mythread,<span class="string">"D"</span>);</span><br><span class="line">Thread e=<span class="keyword">new</span> Thread(mythread,<span class="string">"E"</span>);</span><br><span class="line">a.start();</span><br><span class="line">b.start();</span><br><span class="line">c.start();</span><br><span class="line">d.start();</span><br><span class="line">e.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src="/线程/Java多线程入门/threadgongxiang1.png" title="线程共享数据"><img src="/线程/Java多线程入门/threadgongxiang2.png" title="线程共享数据"><p>可以看出这里已经出现了错误</p><p>因为在大多数jvm中，count–的操作分为如下下三步：</p><p>1，取得原有count值</p><p>2，计算i -1</p><p>3，对i进行赋值</p><p>所以多个线程同时访问时出现问题就是难以避免的了。</p><p>那么有没有什么解决办法呢？</p><p>答案是：当然有，而且很简单。</p><p>在run方法前加上synchronized关键字即可得到正确答案。</p><h3 id="一些常用方法"><a href="#一些常用方法" class="headerlink" title="一些常用方法"></a>一些常用方法</h3><h4 id="currentThread"><a href="#currentThread" class="headerlink" title="currentThread()"></a>currentThread()</h4><p>返回对当前正在执行的线程对象的引用。</p><h4 id="getId"><a href="#getId" class="headerlink" title="getId()"></a>getId()</h4><p>返回此线程的标识符</p><h4 id="getName"><a href="#getName" class="headerlink" title="getName()"></a>getName()</h4><p>返回此线程的名称</p><h4 id="getPriority"><a href="#getPriority" class="headerlink" title="getPriority()"></a>getPriority()</h4><p>返回此线程的优先级</p><h4 id="isAlive"><a href="#isAlive" class="headerlink" title="isAlive()"></a>isAlive()</h4><p>测试这个线程是否还处于活动状态。</p><p>什么是活动状态呢？</p><p>活动状态就是线程已经启动且尚未终止。线程处于正在运行或准备运行的状态。</p><h4 id="sleep-long-millis"><a href="#sleep-long-millis" class="headerlink" title="sleep(long millis)"></a>sleep(long millis)</h4><p>使当前正在执行的线程以指定的毫秒数“休眠”（暂时停止执行），具体取决于系统定时器和调度程序的精度和准确性。</p><h4 id="interrupt"><a href="#interrupt" class="headerlink" title="interrupt()"></a>interrupt()</h4><p>中断这个线程。</p><h4 id="interrupted-和isInterrupted"><a href="#interrupted-和isInterrupted" class="headerlink" title="interrupted() 和isInterrupted()"></a>interrupted() 和isInterrupted()</h4><p>interrupted()：测试当前线程是否已经是中断状态，执行后具有将状态标志清除为false的功能。</p><p>isInterrupted()： 测试线程Thread对相关是否已经是中断状态，但不清楚状态标志</p><h4 id="setName-String-name"><a href="#setName-String-name" class="headerlink" title="setName(String name)"></a>setName(String name)</h4><p>将此线程的名称更改为等于参数 name 。</p><h4 id="isDaemon"><a href="#isDaemon" class="headerlink" title="isDaemon()"></a>isDaemon()</h4><p>测试这个线程是否是守护线程。</p><h4 id="setDaemon-boolean-on"><a href="#setDaemon-boolean-on" class="headerlink" title="setDaemon(boolean on)"></a>setDaemon(boolean on)</h4><p>将此线程标记为 daemon线程或用户线程。</p><h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><p>在很多情况下，主线程生成并启动了子线程，如果子线程里要进行大量的耗时的运算，主线程往往将于子线程之前结束，但是如果主线程处理完其他的事务后，需要用到子线程的处理结果，也就是主线程需要等待子线程执行完成之后再结束，这个时候就要用到join()方法了。</p><p>join()的作用是：“等待该线程终止”，这里需要理解的就是该线程是指的主线程等待子线程的终止。也就是在子线程调用了join()方法后面的代码，只有等到子线程结束了才能执行</p><h4 id="yield"><a href="#yield" class="headerlink" title="yield()"></a>yield()</h4><p>yield()方法的作用是放弃当前的CPU资源，将它让给其他的任务去占用CPU时间。</p><p>注意：放弃的时间不确定，可能一会就会重新获得CPU时间片。</p><h4 id="setPriority-int-newPriority"><a href="#setPriority-int-newPriority" class="headerlink" title="setPriority(int newPriority)"></a>setPriority(int newPriority)</h4><p>更改此线程的优先级</p><h3 id="如何停止一个线程呢？"><a href="#如何停止一个线程呢？" class="headerlink" title="如何停止一个线程呢？"></a>如何停止一个线程呢？</h3><p>stop(),suspend(),resume()（仅用于与suspend()一起使用）这些方法已被弃用，所以我这里不予讲解。</p><img src="/线程/Java多线程入门/zuofei.png" title="已舍弃的方法"><h4 id="使用interrupt-方法"><a href="#使用interrupt-方法" class="headerlink" title="使用interrupt()方法"></a>使用interrupt()方法</h4><p>我们上面提到了interrupt()方法，先来试一下interrupt()方法能不能停止线程</p><p>MyThread.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"i="</span> + (i + <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Run.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            MyThread thread = <span class="keyword">new</span> MyThread();</span><br><span class="line">            System.out.println(<span class="string">"start"</span>);</span><br><span class="line">            thread.start();</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            System.out.println(<span class="string">"sleep"</span>);</span><br><span class="line">            thread.interrupt();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"main catch"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src="/线程/Java多线程入门/interruptNotStop.png" title="interrupt方法"><p>运行上诉代码你会发现，线程并不会终止。</p><p>针对上面代码的一个改进：</p><p>interrupted()方法判断线程是否停止，如果是停止状态则break</p><p>MyThread.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.run();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (MyThread.interrupted()) &#123;</span><br><span class="line">System.out.println(<span class="string">"已经是停止状态了!我要退出了!"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"i="</span> + (i + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"看到这句话说明线程并未终止------"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Run.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            MyThread thread = <span class="keyword">new</span> MyThread();</span><br><span class="line">            System.out.println(<span class="string">"start"</span>);</span><br><span class="line">            thread.start();</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            System.out.println(<span class="string">"sleep"</span>);</span><br><span class="line">            thread.interrupt();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"main catch"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">System.out.println(<span class="string">"end!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src="/线程/Java多线程入门/breakNotStop.png" title="线程未停止"><p>for循环虽然停止执行了，但是for循环下面的语句还是会执行，说明线程并未被停止。</p><h4 id="使用return停止线程"><a href="#使用return停止线程" class="headerlink" title="使用return停止线程"></a>使用return停止线程</h4><p>MyThread.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.isInterrupted()) &#123;</span><br><span class="line">System.out.println(<span class="string">"停止了!"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"timer="</span> + System.currentTimeMillis());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Run.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">MyThread t=<span class="keyword">new</span> MyThread();</span><br><span class="line">t.start();</span><br><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">t.interrupt();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src="/线程/Java多线程入门/returnStop.png" title="线程停止"><p>线程终止。</p><h3 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h3><p>每个线程都具有各自的优先级，线程的优先级可以在程序中表明该线程的重要性，如果有很多线程处于就绪状态，系统会根据优先级来决定首先使哪个线程进入运行状态。但这个==并不意味着低优先级的线程得不到运行，而只是它运行的几率比较小==，如垃圾回收机制线程的优先级就比较低。所以很多垃圾得不到及时的回收处理。</p><p><font color="#FF0000">线程优先级具有继承特性比如A线程启动B线程，则B线程的优先级和A是一样的</font>。</p><p><font color="#FF0000">线程优先级具有随机性也就是说线程优先级高的不一定每一次都先执行完</font>。</p><p>Thread类中包含的成员变量代表了线程的某些优先级。如Thread.MIN_PRIORITY（常数1），Thread.NORM_PRIORITY（常数5）,<br>Thread.MAX_PRIORITY（常数10）。其中每个线程的优先级都在Thread.MIN_PRIORITY（常数1） 到Thread.MAX_PRIORITY（常数10） 之间，<font color="#FF0000">在默认情况下优先级都是Thread.NORM_PRIORITY（常数5）</font>。</p><p>线程优先级具有继承特性测试代码如下：</p><p>MyThread1.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"MyThread1 run priority="</span> + <span class="keyword">this</span>.getPriority());</span><br><span class="line">MyThread2 thread2 = <span class="keyword">new</span> MyThread2();</span><br><span class="line">thread2.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyThread2.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"MyThread2 run priority="</span> + <span class="keyword">this</span>.getPriority());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Run.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"main thread begin priority="</span></span><br><span class="line">+ Thread.currentThread().getPriority());</span><br><span class="line">MyThread1 thread1 = <span class="keyword">new</span> MyThread1();</span><br><span class="line">thread1.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src="/线程/Java多线程入门/youxianji1.png" title="线程优先级继承性"><p>Run.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"main thread begin priority="</span></span><br><span class="line">+ Thread.currentThread().getPriority());</span><br><span class="line">Thread.currentThread().setPriority(<span class="number">6</span>);</span><br><span class="line">System.out.println(<span class="string">"main thread end   priority="</span></span><br><span class="line">+ Thread.currentThread().getPriority());</span><br><span class="line">MyThread1 thread1 = <span class="keyword">new</span> MyThread1();</span><br><span class="line">thread1.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src="/线程/Java多线程入门/youxianji2.png" title="线程优先级继承性"><h3 id="Java多线程分类"><a href="#Java多线程分类" class="headerlink" title="Java多线程分类"></a>Java多线程分类</h3><h4 id="多线程分类"><a href="#多线程分类" class="headerlink" title="多线程分类"></a>多线程分类</h4><h5 id="用户线程"><a href="#用户线程" class="headerlink" title="用户线程"></a>用户线程</h5><p>运行在前台，执行具体的任务，如程序的主线程、连接网络的子线程等都是用户线程</p><h5 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h5><p>运行在后台，为其他前台线程服务.也可以说守护线程是JVM中非守护线程的 “佣人”。</p><p><font color="#FF0000">特点： 一旦所有用户线程都结束运行，守护线程会随JVM一起结束工作</font></p><p>应用：数据库连接池中的检测线程，JVM虚拟机启动后的检测线程</p><p><font color="#FF0000">最常见的守护线程：垃圾回收线程</font></p><h4 id="如何设置守护线程？"><a href="#如何设置守护线程？" class="headerlink" title="如何设置守护线程？"></a>如何设置守护线程？</h4><p>可以通过调用Thead类的setDaemon(true)方法设置当前的线程为守护线程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.  setDaemon(true)必须在start（）方法前执行，否则会抛出IllegalThreadStateException异常</span><br><span class="line">2. 在守护线程中产生的新线程也是守护线程</span><br><span class="line">3. 不是所有的任务都可以分配给守护线程来执行，比如读写操作或者计算逻辑</span><br></pre></td></tr></table></figure><p>MyThread.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">i++;</span><br><span class="line">System.out.println(<span class="string">"i="</span> + (i));</span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Run.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">MyThread thread = <span class="keyword">new</span> MyThread();</span><br><span class="line">thread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">thread.start();</span><br><span class="line">Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">System.out.println(<span class="string">"我离开thread对象也不再打印了，也就是停止了！"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src="/线程/Java多线程入门/shouhuThread.png" title="守护线程"><p>由运行结果可知，主线程结束后，守护线程也跟着结束。</p>]]></content>
      
      
      <categories>
          
          <category> 线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一篇文章搞定nvm，node.js，npm，nrm安装</title>
      <link href="/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/nvm-node-js-npm-nrm/"/>
      <url>/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/nvm-node-js-npm-nrm/</url>
      
        <content type="html"><![CDATA[<h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><h4 id="nvm，node-js，npm，nrm的关系"><a href="#nvm，node-js，npm，nrm的关系" class="headerlink" title="nvm，node.js，npm，nrm的关系"></a>nvm，node.js，npm，nrm的关系</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1, nvm ： nvm是node.js的版本管理工具，用于管理node.js和npm的版本。</span><br><span class="line">2, node.js ： node.js是javascript的一种运行环境，是对Google V8引擎进行的封装，是一个服务器端的javascript的解释器。</span><br><span class="line">3, npm ： npm是随同node.js一起安装的包管理工具，npm管理对应nodeJs的第三方插件。</span><br><span class="line">4, nrm ： nrm是npm registry管理工具，可以用来管理npm的镜像源。</span><br></pre></td></tr></table></figure> <a id="more"></a><img src="/环境配置/nvm-node-js-npm-nrm/guanxitu.png" title="nvm，node.js，npm关系图"><h4 id="为什么要用nvm来管理node版本"><a href="#为什么要用nvm来管理node版本" class="headerlink" title="为什么要用nvm来管理node版本"></a>为什么要用nvm来管理node版本</h4><p>在开发中，有时候对node的版本有要求，有时候需要切换到指定的node版本来重现问题等。遇到这种需求的时候，我们需要能够灵活的切换node版本。</p><h4 id="nrm有什么用"><a href="#nrm有什么用" class="headerlink" title="nrm有什么用"></a>nrm有什么用</h4><p>当我们使用npm来下载所需要的包时，可能由于网络的原因，需要等待很长时间才能完成下载，使用nrm切换npm镜像源为taobao，可以快速下载完成。</p><img src="/环境配置/nvm-node-js-npm-nrm/nrmyongchu.png" title="nrm管理npm镜像源"><hr><h3 id="Windows下nvm的下载安装"><a href="#Windows下nvm的下载安装" class="headerlink" title="Windows下nvm的下载安装"></a>Windows下nvm的下载安装</h3><p>由于官方版本并不支持Windows，所以需要 <a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">nvm-windows</a>来实现Windows下的 nvm 安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">下载之前，请确保已卸载所有的Node.js</span><br></pre></td></tr></table></figure> <p><a href="https://github.com/coreybutler/nvm-windows/wiki" target="_blank" rel="noopener">说明文档</a></p><h4 id="下载免安装包"><a href="#下载免安装包" class="headerlink" title="下载免安装包"></a>下载免安装包</h4><img src="/环境配置/nvm-node-js-npm-nrm/nvmxiazai.png" title="nvm下载地址"><p>解压完成后，有如下几个文件</p><img src="/环境配置/nvm-node-js-npm-nrm/nvmjieya.png" title="nvm解压"><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><p>解压完成后，还需要设置以下环境变量</p><table><thead><tr><th>变量名</th><th>变量值</th></tr></thead><tbody><tr><td>NVM_HOME</td><td>E:\softWare\nvm</td></tr><tr><td>NVM_SYMLINK</td><td>E:\softWare\nodejs</td></tr><tr><td>Path</td><td>%NVM_HOME%</td></tr><tr><td>Path</td><td>%NVM_SYMLINK%</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NVM_HOME ： nvm的解压路径</span><br><span class="line">NVM_SYMLINK ： 路径用于标识使用的哪个版本的node.js</span><br></pre></td></tr></table></figure> <img src="/环境配置/nvm-node-js-npm-nrm/hjbl.png" title="nvm环境变量"><h4 id="新建-settings-txt"><a href="#新建-settings-txt" class="headerlink" title="新建 settings.txt"></a>新建 settings.txt</h4><p>在解压目录下，新建 settings.txt 文件，文件包含以下属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root ： 存储不同版本node.js的路径，同 NVM_HOME;</span><br><span class="line">path ： 当前使用的node.js的路径，同NVM_SYMLINK；</span><br><span class="line">proxy ： 一般设置为 &quot;none&quot;。如果需要使用代理，可以使用命令行中的nvm对其进行修改。</span><br><span class="line">arch ： 标识操作系统，32或64</span><br></pre></td></tr></table></figure><img src="/环境配置/nvm-node-js-npm-nrm/setting.png" title="setting.txt示例"><h4 id="nvm安装完成"><a href="#nvm安装完成" class="headerlink" title="nvm安装完成"></a>nvm安装完成</h4><p>使用 nvm 命令验证，是否安装成功。</p><img src="/环境配置/nvm-node-js-npm-nrm/nvmcmd.png" title="nvm验证"><hr><h3 id="使用-nvm-安装node-js"><a href="#使用-nvm-安装node-js" class="headerlink" title="使用 nvm 安装node.js"></a>使用 nvm 安装node.js</h3><h4 id="切换nvm镜像源"><a href="#切换nvm镜像源" class="headerlink" title="切换nvm镜像源"></a>切换nvm镜像源</h4><p>nvm默认的下载地址是 <a href="http://nodejs.org/dist/" target="_blank" rel="noopener">nvm默认镜像源</a> ，国内访问的话会很慢。<br>所以在使用nvm安装node之前，建议切换镜像源。</p><p>切换nvm镜像源的方法很简单，只需要把下面两行，复制到上面的 settings.txt 文件中即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node_mirror: https://npm.taobao.org/mirrors/node/</span><br><span class="line">npm_mirror: https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure><img src="/环境配置/nvm-node-js-npm-nrm/nvmjingxiang.png" title="nvm镜像源"><h4 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">常用命令:</span><br><span class="line">nvm list available #查看远程所有可用的node版本</span><br><span class="line">nvm list #查看本地所有node版本</span><br><span class="line">nvm install 8.11.2 #安装 8.11.2 版本</span><br><span class="line">nvm use 8.11.2 #切换至 8.11.2 版本</span><br><span class="line">nvm uninstall 8.11.2 #卸载8.11.2 版本</span><br></pre></td></tr></table></figure><p>选择一个版本下载，下载 node.js 的同时，会把npm也一同下载下来。</p><p>下载完成后，通过 node -v 和 npm -v 命令，查询当前的版本。</p><img src="/环境配置/nvm-node-js-npm-nrm/node_npm.png" title="node，npm版本"><hr><h3 id="nrm-–-NPM-registry-manager"><a href="#nrm-–-NPM-registry-manager" class="headerlink" title="nrm – NPM registry manager"></a>nrm – NPM registry manager</h3><p>当使用 npm 下载第三方插件的时候，默认使用的镜像源会请求国外服务器，国内访问的话，会比较慢，通过使用 nrm ，可以在不同的 npm 镜像源之间快速切换。</p><h4 id="安装nrm"><a href="#安装nrm" class="headerlink" title="安装nrm"></a>安装nrm</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nrm</span><br></pre></td></tr></table></figure><h4 id="nrm的使用"><a href="#nrm的使用" class="headerlink" title="nrm的使用"></a>nrm的使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用 nrm -ls 命令，可以查看所有可切换的 npm 镜像源。其中，带 * 的为当前正在使用的 npm 镜像源。</span><br><span class="line"></span><br><span class="line">执行 nrm use &lt;name&gt; 命令，用于切换 npm 镜像源。</span><br></pre></td></tr></table></figure><img src="/环境配置/nvm-node-js-npm-nrm/npmjingxiang.png" title="nrm管理npm镜像源"><p>切换完成后，之后再使用 npm install 下载第三方插件时，都会从新的镜像源地址进行下载。</p>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql下载安装</title>
      <link href="/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Mysql%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85/"/>
      <url>/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Mysql%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>下载地址: <a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">官网下载</a> </p><p>下载合适的Mysql压缩包，本文为例，下载的版本是 “mysql-5.7.27-winx64.zip”</p><a id="more"></a><img src="/环境配置/Mysql下载安装/xiazaidizhi.png" title="下载地址"><p>下载完成后，将zip包解压到相应的目录下，本文解压目录是  “E:\softWare\mysql\mysql-5.7.27-winx64”</p><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><p>打开解压目录，在该目录下创建 名为 my.ini 的配置文件</p><img src="/环境配置/Mysql下载安装/wenjiandizhi.png" title="my.ini"><p>文件内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set=utf8</span><br><span class="line"> </span><br><span class="line">[mysqld]</span><br><span class="line"># 设置3306端口</span><br><span class="line">port = 3306</span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir=E:\\softWare\\mysql\\mysql-5.7.27-winx64</span><br><span class="line"># 设置 mysql数据库的数据的存放目录，MySQL 8+ 不需要以下配置，系统自己生成即可，否则有可能报错</span><br><span class="line">datadir=E:\\softWare\\mysql\\sqldata</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections=20</span><br><span class="line"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class="line">character-set-server=utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine=INNODB</span><br></pre></td></tr></table></figure><p>注意：文件分割符使用的是转义字符 “\\“</p><img src="/环境配置/Mysql下载安装/peizhiwenjian.png" title="my.ini"><p>以管理员身份打开cmd，切换目录至 ${mysql_home}\bin 目录下，执行下述命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">切换至此目录下：</span><br><span class="line">E:\softWare\mysql\mysql-5.7.27-winx64\bin&gt;</span><br><span class="line"></span><br><span class="line">执行命令：</span><br><span class="line">mysqld --initialize --console</span><br></pre></td></tr></table></figure><p>执行成功后，会提示生成初始密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">2018-04-20T02:35:05.464644Z 5 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: APWCY5ws&amp;hjQ</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>此密码用于后续登录mysql时使用。</p><p>再执行以下安装命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld install</span><br></pre></td></tr></table></figure><p>初始化data目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize-insecure</span><br></pre></td></tr></table></figure><p>启动mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure><p>至此mysql安装成功。</p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><img src="/环境配置/Mysql下载安装/cmd1.png" title="命令不识别"><p>我们每次在启动mysql 的时候，都需要先切换到 ${mysql_home}\bin 目录下，才会识别mysql命令。要使得每次打开cmd，都可以识别mysql命令，需要配置以下环境变量。</p><table><thead><tr><th>变量名</th><th>变量值</th></tr></thead><tbody><tr><td>Path</td><td>E:\softWare\mysql\mysql-5.7.27-winx64\bin</td></tr></tbody></table><p>配置完成后，识别mysql命令</p><img src="/环境配置/Mysql下载安装/cmd2.png" title="命令识别"><h3 id="登录Mysql，修改密码"><a href="#登录Mysql，修改密码" class="headerlink" title="登录Mysql，修改密码"></a>登录Mysql，修改密码</h3><p>输入以下命令，登录mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql -h localhost -u root -p</span><br><span class="line"></span><br><span class="line">-h 指定客户端所要登录的 MySQL 主机名, 登录本机(localhost 或 127.0.0.1)该参数可以省略;</span><br><span class="line"></span><br><span class="line">-u  登录的用户名;</span><br><span class="line"></span><br><span class="line">-p : 告诉服务器将会使用一个密码来登录, 如果所要登录的用户名密码为空, 可以忽略此选项。</span><br></pre></td></tr></table></figure><p>然后输入上面默认生成的密码，即可登录mysql.</p><p>登陆成功后，可以使用以下命令，修改密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set password for root@localhost = password(&apos;新密码&apos;);</span><br></pre></td></tr></table></figure><h3 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h3><h4 id="由于找不到MSVCR120-dll-无法继续执行代码-重新安装程序可能会解决此问题"><a href="#由于找不到MSVCR120-dll-无法继续执行代码-重新安装程序可能会解决此问题" class="headerlink" title="由于找不到MSVCR120.dll,无法继续执行代码.重新安装程序可能会解决此问题"></a>由于找不到MSVCR120.dll,无法继续执行代码.重新安装程序可能会解决此问题</h4><img src="/环境配置/Mysql下载安装/cuowu.png" title="找不到MSVCR120.dll"><p>解决办法：这是由于缺少文件 vcredist ，<a href="https://www.microsoft.com/zh-CN/download/details.aspx?id=40784" target="_blank" rel="noopener">下载</a>安装这个文件即可。</p>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat安装，配置</title>
      <link href="/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Tomcat%E5%AE%89%E8%A3%85%EF%BC%8C%E9%85%8D%E7%BD%AE/"/>
      <url>/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Tomcat%E5%AE%89%E8%A3%85%EF%BC%8C%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p>下载地址： <a href="https://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">官方下载</a></p><p>下载合适的压缩包，下载完成对其解压，即可完成安装。</p><a id="more"></a><img src="/环境配置/Tomcat安装，配置/xiazaidizhi.png" title="下载地址"><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><table><thead><tr><th>变量名</th><th>变量值</th></tr></thead><tbody><tr><td>CATALINA_BASE</td><td>E:\softWare\tomcat\apache-tomcat-8.5.43</td></tr><tr><td>CATALINA_HOME</td><td>E:\softWare\tomcat\apache-tomcat-8.5.43</td></tr><tr><td>Path</td><td>%CATALINA_HOME%\lib</td></tr><tr><td>Path</td><td>%CATALINA_HOME%\bin</td></tr></tbody></table><img src="/环境配置/Tomcat安装，配置/hjbl1.png" title="环境变量"><img src="/环境配置/Tomcat安装，配置/hjbl2.png" title="环境变量"><h3 id="启动-关闭-tomcat"><a href="#启动-关闭-tomcat" class="headerlink" title="启动/关闭 tomcat"></a>启动/关闭 tomcat</h3><h4 id="启动方式1"><a href="#启动方式1" class="headerlink" title="启动方式1"></a>启动方式1</h4><p>进入安装目录下的bin目录，双击 startup.bat 即可完成启动。</p><img src="/环境配置/Tomcat安装，配置/qd1.png" title="启动方式"><p>启动成功后，访问 localhost:8080</p><img src="/环境配置/Tomcat安装，配置/qd2.png" title="访问tomcat"><h4 id="启动方式2"><a href="#启动方式2" class="headerlink" title="启动方式2"></a>启动方式2</h4><p>进入命令行，输入 startup 命令  [startup.bat命令 也可以]，即可启动 tomcat。</p><h4 id="关闭方式1"><a href="#关闭方式1" class="headerlink" title="关闭方式1"></a>关闭方式1</h4><p>进入bin目录下，双击 shutdown.bat 即可关闭 tomcat。</p><p>进入命令行，输入 shutdown.bat ，也可以关闭 tomcat。Windows下，如果输入的命令是 shutdown , 则会和windows本身的shutdown命令冲突。</p><img src="/环境配置/Tomcat安装，配置/gb.png" title="命令冲突"><h3 id="启动乱码的问题"><a href="#启动乱码的问题" class="headerlink" title="启动乱码的问题"></a>启动乱码的问题</h3><p>在启动tomcat的过程中，控制台有乱码的情况出现：</p><img src="/环境配置/Tomcat安装，配置/luanma1.png" title="启动乱码"><p>解决办法：修改 E:\softWare\tomcat\apache-tomcat-8.5.43\conf 下的 logging.properties 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java.util.logging.ConsoleHandler.encoding = UTF-8</span><br><span class="line">改为</span><br><span class="line">java.util.logging.ConsoleHandler.encoding = GBK</span><br></pre></td></tr></table></figure><img src="/环境配置/Tomcat安装，配置/luanma2.png" title="修改配置"><p>修改完成后，启动不再乱码</p><img src="/环境配置/Tomcat安装，配置/luanma3.png" title="启动不再乱码">]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven安装，配置</title>
      <link href="/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/maven%E5%AE%89%E8%A3%85%EF%BC%8C%E9%85%8D%E7%BD%AE/"/>
      <url>/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/maven%E5%AE%89%E8%A3%85%EF%BC%8C%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p>下载地址：<a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">官网下载</a></p><p>下载完成后，解压到指定的文件夹，即可完成安装。</p><a id="more"></a><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><table><thead><tr><th>变量名</th><th>变量值</th></tr></thead><tbody><tr><td>MAVEN_HOME</td><td>E:\softWare\maven\apache-maven-3.6.1</td></tr><tr><td>Path</td><td>%MAVEN_HOME%\bin</td></tr><tr><td>MAVEN_OPTS [可选配置]</td><td>-Xms128m -Xmx512m</td></tr></tbody></table><img src="/环境配置/maven安装，配置/hjbl2.png" title="环境变量"><img src="/环境配置/maven安装，配置/hjbl1.png" title="环境变量"><h3 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h3><p>运行命令 mvn -v</p><p>输入内容，则说明安装成功。</p><img src="/环境配置/maven安装，配置/banbenyanzheng.png" title="安装验证"><h3 id="可选配置"><a href="#可选配置" class="headerlink" title="可选配置"></a>可选配置</h3><h4 id="1，修改maven本地仓库"><a href="#1，修改maven本地仓库" class="headerlink" title="1，修改maven本地仓库"></a>1，修改maven本地仓库</h4><p>如果没用改动，使用maven的过程中，下载的jar包，默认的保存路径是 “${user.home}/.m2/repository”。我们可以通过，修改配置文件，指定下载路径。</p><p>跳转到maven安装路径下，修改conf文件夹下的 settings.xml 文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;localRepository&gt;E:\softWare\maven\repository&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure><img src="/环境配置/maven安装，配置/bendiku.png" title="maven本地库修改"><p>修改完成后，之后的所有jar包将下载到此路径下。</p><h4 id="2，修改maven远程仓库"><a href="#2，修改maven远程仓库" class="headerlink" title="2，修改maven远程仓库"></a>2，修改maven远程仓库</h4><p>还是修改安装目录下的settings.xml文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirror&gt;  </span><br><span class="line">     &lt;id&gt;alimaven&lt;/id&gt;  </span><br><span class="line">     &lt;name&gt;aliyun maven&lt;/name&gt;  </span><br><span class="line">     &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;  </span><br><span class="line">     &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;          </span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure><img src="/环境配置/maven安装，配置/yuanchengku.png" title="maven远程仓库修改">]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安装及环境配置</title>
      <link href="/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Java%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Java%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>使用以下网址，下载指定的JDK。</p><p>下载地址1：<a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">官方下载</a></p><p>下载地址2： <a href="https://pan.baidu.com/s/1vFoMuAYVQRgMeImJWe_rfg" target="_blank" rel="noopener">jdk-8u221-windows-x64</a> 提取码[xrj9]</p><a id="more"></a><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>打开已下载的JDK，“下一步next”到底，中间可自定义自己的安装路径。</p><img src="/环境配置/Java安装及环境配置/anzhuanglujing.png" title="安装路径"><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><h4 id="完成环境变量的配置，需要添加以下几组环境变量。"><a href="#完成环境变量的配置，需要添加以下几组环境变量。" class="headerlink" title="完成环境变量的配置，需要添加以下几组环境变量。"></a>完成环境变量的配置，需要添加以下几组环境变量。</h4><table><thead><tr><th>变量名</th><th>变量值</th></tr></thead><tbody><tr><td>JAVA_HOME</td><td>E:\softWare\java\jdk</td></tr><tr><td>CLASSPATH</td><td>.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar;</td></tr><tr><td>Path</td><td>%JAVA_HOME%\bin</td></tr></tbody></table><img src="/环境配置/Java安装及环境配置/hjbl1.png" title="环境变量配置"><img src="/环境配置/Java安装及环境配置/hjbl2.png" title="环境变量配置"><h3 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h3><p>打开CMD，输入 java -version 或 javac -version</p><img src="/环境配置/Java安装及环境配置/cmd.png" title="安装验证"><p>若有输出，则证明安装成功。</p>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
